{"ast":null,"code":"//Älä laske viimeistä tuntia mukaan\n//C) Aikaikkuna jonka loppupäätä liikutetaan alkuun korkeimpaan kohtaan, sitten alkupäätä matalimpaan.\n//Jos korkeampaa kohtaa ei löydy niin jää korkeaan. Etsi vielä matalampaa. Tämä alue on tutkittu.\n//Iskän idea eli ota loppupäästä korkein, sitten alkupäästä käy läpi, löytyy korkein profit. \n//Sitten siirrä looppupäätä alkuunpäin jos korkeampi löytyy, ja taas alusta hae matalinta\nexport function maximalprofitwindow(dataset) {\n  //loppupää lopusta alkuun , pysähdy aina uuden korkeimman huipun kohdalle kunnes alussa.\n  //Kun korkein huippu niin mene alkupään kokeilulla alusta loppuun ja pysähdy alimmassa, merkkaa parhaaksi \n  //tulokseksi\n  var datalenght = Object.keys(dataset[\"total_volumes\"]).length;\n  var day_lowest_price = null;\n  var day_highest_price = null;\n  var highest_price = 0;\n  var lowest_price = 100000;\n  var global_lowest_price = 100000;\n  var global_day_lowest_price = null;\n  var global_highest_price = 0;\n  var global_day_highest_price = null;\n  var biggest_profit = 0;\n\n  for (var i = datalenght - 1; i >= 0; i--) {\n    if (dataset[\"prices\"][i][1] > highest_price) {\n      highest_price = dataset[\"prices\"][i][1];\n      day_highest_price = dataset[\"prices\"][i][0]; //tule alusta tähän pisteeseen etsien alinta kohtaa\n\n      for (var z = 0; z < i; z++) {\n        if (dataset[\"prices\"][z][1] < lowest_price) {\n          lowest_price = dataset[\"prices\"][z][1];\n          day_lowest_price = dataset[\"prices\"][z][0]; //console.log(\"Lowest day\")\n          // console.log(dataset[\"prices\"][z][0])\n        } //Nollaa lowest_price ja pistä kuitenkin global lowest_price muistiin\n        //vertaaconsole.log(highest_price-lowest_price)\n        //jos suurempi profit niin sitten talleta globaaleiksi\n\n\n        if (biggest_profit < highest_price - lowest_price) {\n          biggest_profit = highest_price - lowest_price;\n          global_lowest_price = lowest_price;\n          global_highest_price = highest_price;\n          global_day_lowest_price = day_lowest_price;\n          global_day_highest_price = day_highest_price; //console.log(\"GLOBAL DAY\")\n          //console.log(global_day_lowest_price)\n          //console.log(day_lowest_price)\n          //console.log(global_lowest_price)\n        }\n\n        lowest_price = 10000;\n        day_lowest_price = null; //ota ylin-alin hinta ja niiden päivämäärät\n        //jos ylin-alin on negatiivinen niin ei kuulu ostaa tai myydä tai jos null\n      }\n    }\n  }\n\n  const global_day_lowest_price_converted = new Date(global_day_lowest_price).toLocaleString();\n  const global_day_highest_price_converted = new Date(global_day_highest_price).toLocaleString();\n  return [global_day_lowest_price_converted, global_day_highest_price_converted];\n}","map":{"version":3,"sources":["/home/user/mern/vincit-pre-assignment/src/modules/MaximalProfitWindow.js"],"names":["maximalprofitwindow","dataset","datalenght","Object","keys","length","day_lowest_price","day_highest_price","highest_price","lowest_price","global_lowest_price","global_day_lowest_price","global_highest_price","global_day_highest_price","biggest_profit","i","z","global_day_lowest_price_converted","Date","toLocaleString","global_day_highest_price_converted"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAGA,OAAO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;AAEzC;AACA;AACA;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYH,OAAO,CAAC,eAAD,CAAnB,EAAsCI,MAAvD;AACA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAIC,iBAAiB,GAAG,IAAxB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,YAAY,GAAG,MAAnB;AACA,MAAIC,mBAAmB,GAAG,MAA1B;AACA,MAAIC,uBAAuB,GAAG,IAA9B;AACA,MAAIC,oBAAoB,GAAG,CAA3B;AACA,MAAIC,wBAAwB,GAAG,IAA/B;AACA,MAAIC,cAAc,GAAG,CAArB;;AAIA,OAAK,IAAIC,CAAC,GAAGb,UAAU,GAAC,CAAxB,EAA2Ba,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,QAAId,OAAO,CAAC,QAAD,CAAP,CAAkBc,CAAlB,EAAqB,CAArB,IAA0BP,aAA9B,EAA8C;AAC1CA,MAAAA,aAAa,GAAGP,OAAO,CAAC,QAAD,CAAP,CAAkBc,CAAlB,EAAqB,CAArB,CAAhB;AACAR,MAAAA,iBAAiB,GAAGN,OAAO,CAAC,QAAD,CAAP,CAAkBc,CAAlB,EAAqB,CAArB,CAApB,CAF0C,CAG1C;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuBC,CAAC,EAAxB,EAA2B;AACvB,YAAIf,OAAO,CAAC,QAAD,CAAP,CAAkBe,CAAlB,EAAqB,CAArB,IAA0BP,YAA9B,EAA6C;AACzCA,UAAAA,YAAY,GAAGR,OAAO,CAAC,QAAD,CAAP,CAAkBe,CAAlB,EAAqB,CAArB,CAAf;AACAV,UAAAA,gBAAgB,GAAGL,OAAO,CAAC,QAAD,CAAP,CAAkBe,CAAlB,EAAqB,CAArB,CAAnB,CAFyC,CAGzC;AACD;AACN,SAN0B,CAO3B;AACA;AACA;;;AAEA,YAAIF,cAAc,GAAIN,aAAa,GAACC,YAApC,EAAkD;AAC9CK,UAAAA,cAAc,GAAGN,aAAa,GAACC,YAA/B;AACAC,UAAAA,mBAAmB,GAAGD,YAAtB;AACAG,UAAAA,oBAAoB,GAAGJ,aAAvB;AACAG,UAAAA,uBAAuB,GAAGL,gBAA1B;AACAO,UAAAA,wBAAwB,GAAGN,iBAA3B,CAL8C,CAM9C;AACA;AACA;AACA;AAEH;;AACDE,QAAAA,YAAY,GAAG,KAAf;AACAH,QAAAA,gBAAgB,GAAG,IAAnB,CAxB2B,CAyB3B;AACA;AACH;AACJ;AAGJ;;AAED,QAAMW,iCAAiC,GAAG,IAAIC,IAAJ,CAASP,uBAAT,EAAkCQ,cAAlC,EAA1C;AACA,QAAMC,kCAAkC,GAAG,IAAIF,IAAJ,CAASL,wBAAT,EAAmCM,cAAnC,EAA3C;AAEA,SAAO,CAACF,iCAAD,EAAoCG,kCAApC,CAAP;AAEC","sourcesContent":["//Älä laske viimeistä tuntia mukaan\n//C) Aikaikkuna jonka loppupäätä liikutetaan alkuun korkeimpaan kohtaan, sitten alkupäätä matalimpaan.\n//Jos korkeampaa kohtaa ei löydy niin jää korkeaan. Etsi vielä matalampaa. Tämä alue on tutkittu.\n\n//Iskän idea eli ota loppupäästä korkein, sitten alkupäästä käy läpi, löytyy korkein profit. \n//Sitten siirrä looppupäätä alkuunpäin jos korkeampi löytyy, ja taas alusta hae matalinta\n\n\nexport function maximalprofitwindow(dataset) {\n    \n    //loppupää lopusta alkuun , pysähdy aina uuden korkeimman huipun kohdalle kunnes alussa.\n    //Kun korkein huippu niin mene alkupään kokeilulla alusta loppuun ja pysähdy alimmassa, merkkaa parhaaksi \n    //tulokseksi\n    var datalenght = Object.keys(dataset[\"total_volumes\"]).length;\n    var day_lowest_price = null\n    var day_highest_price = null\n    var highest_price = 0\n    var lowest_price = 100000\n    var global_lowest_price = 100000\n    var global_day_lowest_price = null\n    var global_highest_price = 0\n    var global_day_highest_price = null\n    var biggest_profit = 0\n\n\n\n    for (var i = datalenght-1; i >= 0; i--) {        \n        if (dataset[\"prices\"][i][1] > highest_price  ){\n            highest_price = dataset[\"prices\"][i][1]\n            day_highest_price = dataset[\"prices\"][i][0]\n            //tule alusta tähän pisteeseen etsien alinta kohtaa\n            for (var z = 0; z < i; z++){\n                if (dataset[\"prices\"][z][1] < lowest_price  ){ \n                    lowest_price = dataset[\"prices\"][z][1]\n                    day_lowest_price = dataset[\"prices\"][z][0]\n                    //console.log(\"Lowest day\")\n                   // console.log(dataset[\"prices\"][z][0])\n            }\n            //Nollaa lowest_price ja pistä kuitenkin global lowest_price muistiin\n            //vertaaconsole.log(highest_price-lowest_price)\n            //jos suurempi profit niin sitten talleta globaaleiksi\n    \n            if (biggest_profit < (highest_price-lowest_price)){\n                biggest_profit = highest_price-lowest_price\n                global_lowest_price = lowest_price\n                global_highest_price = highest_price\n                global_day_lowest_price = day_lowest_price\n                global_day_highest_price = day_highest_price\n                //console.log(\"GLOBAL DAY\")\n                //console.log(global_day_lowest_price)\n                //console.log(day_lowest_price)\n                //console.log(global_lowest_price)\n                \n            }   \n            lowest_price = 10000\n            day_lowest_price = null\n            //ota ylin-alin hinta ja niiden päivämäärät\n            //jos ylin-alin on negatiivinen niin ei kuulu ostaa tai myydä tai jos null\n        }\n    }\n    \n\n}\n\nconst global_day_lowest_price_converted = new Date(global_day_lowest_price).toLocaleString()\nconst global_day_highest_price_converted = new Date(global_day_highest_price).toLocaleString()\n\nreturn [global_day_lowest_price_converted, global_day_highest_price_converted]\n\n}"]},"metadata":{},"sourceType":"module"}