{"ast":null,"code":"//Search strategy:\n//outer loop searches highest price beginning from end\n//inner loop scans lowest price after every hit to highest price from outer loop\nexport function maximalprofitwindow(dataset){var datalenght=Object.keys(dataset[\"total_volumes\"]).length;var day_highest_price=null;var highest_price=0;var lowest_price=1000000;var global_lowest_price=1000000;var global_day_lowest_price=null;var global_highest_price=0;var global_day_highest_price=null;var biggest_profit=0;var lowest_price=dataset[\"prices\"][0][1];var day_lowest_price=dataset[\"prices\"][0][0];for(var i=datalenght-1;i>=0;i--){if(dataset[\"prices\"][i][1]>highest_price){highest_price=dataset[\"prices\"][i][1];day_highest_price=dataset[\"prices\"][i][0];for(var z=0;z<i;z++){if(dataset[\"prices\"][z][1]<lowest_price){console.log(\"x->\");lowest_price=dataset[\"prices\"][z][1];day_lowest_price=dataset[\"prices\"][z][0];}if(biggest_profit<highest_price-lowest_price){biggest_profit=highest_price-lowest_price;console.log(biggest_profit);global_lowest_price=lowest_price;global_highest_price=highest_price;global_day_lowest_price=day_lowest_price;global_day_highest_price=day_highest_price;console.log(global_day_lowest_price);console.log(global_lowest_price);}lowest_price=dataset[\"prices\"][0][1];day_lowest_price=dataset[\"prices\"][0][0];}}}var global_day_lowest_price_converted=new Date(global_day_lowest_price).toLocaleString();var global_day_highest_price_converted=new Date(global_day_highest_price).toLocaleString();return[global_day_lowest_price_converted,global_day_highest_price_converted];}","map":{"version":3,"sources":["/home/user/mern/assignment/src/modules/MaximalProfitWindow.js"],"names":["maximalprofitwindow","dataset","datalenght","Object","keys","length","day_highest_price","highest_price","lowest_price","global_lowest_price","global_day_lowest_price","global_highest_price","global_day_highest_price","biggest_profit","day_lowest_price","i","z","console","log","global_day_lowest_price_converted","Date","toLocaleString","global_day_highest_price_converted"],"mappings":"AAAA;AACA;AACA;AACA,MAAO,SAASA,CAAAA,mBAAT,CAA6BC,OAA7B,CAAsC,CAEzC,GAAIC,CAAAA,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAYH,OAAO,CAAC,eAAD,CAAnB,EAAsCI,MAAvD,CACA,GAAIC,CAAAA,iBAAiB,CAAG,IAAxB,CACA,GAAIC,CAAAA,aAAa,CAAG,CAApB,CACA,GAAIC,CAAAA,YAAY,CAAG,OAAnB,CACA,GAAIC,CAAAA,mBAAmB,CAAG,OAA1B,CACA,GAAIC,CAAAA,uBAAuB,CAAG,IAA9B,CACA,GAAIC,CAAAA,oBAAoB,CAAG,CAA3B,CACA,GAAIC,CAAAA,wBAAwB,CAAG,IAA/B,CACA,GAAIC,CAAAA,cAAc,CAAG,CAArB,CACA,GAAIL,CAAAA,YAAY,CAAGP,OAAO,CAAC,QAAD,CAAP,CAAkB,CAAlB,EAAqB,CAArB,CAAnB,CACA,GAAIa,CAAAA,gBAAgB,CAAGb,OAAO,CAAC,QAAD,CAAP,CAAkB,CAAlB,EAAqB,CAArB,CAAvB,CAEA,IAAK,GAAIc,CAAAA,CAAC,CAAGb,UAAU,CAAC,CAAxB,CAA2Ba,CAAC,EAAI,CAAhC,CAAmCA,CAAC,EAApC,CAAwC,CACpC,GAAId,OAAO,CAAC,QAAD,CAAP,CAAkBc,CAAlB,EAAqB,CAArB,EAA0BR,aAA9B,CAA8C,CAC1CA,aAAa,CAAGN,OAAO,CAAC,QAAD,CAAP,CAAkBc,CAAlB,EAAqB,CAArB,CAAhB,CACAT,iBAAiB,CAAGL,OAAO,CAAC,QAAD,CAAP,CAAkBc,CAAlB,EAAqB,CAArB,CAApB,CAEA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,CAApB,CAAuBC,CAAC,EAAxB,CAA2B,CACvB,GAAIf,OAAO,CAAC,QAAD,CAAP,CAAkBe,CAAlB,EAAqB,CAArB,EAA0BR,YAA9B,CAA6C,CACzCS,OAAO,CAACC,GAAR,CAAY,KAAZ,EACAV,YAAY,CAAGP,OAAO,CAAC,QAAD,CAAP,CAAkBe,CAAlB,EAAqB,CAArB,CAAf,CACAF,gBAAgB,CAAGb,OAAO,CAAC,QAAD,CAAP,CAAkBe,CAAlB,EAAqB,CAArB,CAAnB,CAEP,CACD,GAAIH,cAAc,CAAIN,aAAa,CAACC,YAApC,CAAkD,CAC9CK,cAAc,CAAGN,aAAa,CAACC,YAA/B,CACAS,OAAO,CAACC,GAAR,CAAYL,cAAZ,EACAJ,mBAAmB,CAAGD,YAAtB,CACAG,oBAAoB,CAAGJ,aAAvB,CACAG,uBAAuB,CAAGI,gBAA1B,CACAF,wBAAwB,CAAGN,iBAA3B,CACAW,OAAO,CAACC,GAAR,CAAYR,uBAAZ,EACAO,OAAO,CAACC,GAAR,CAAYT,mBAAZ,EACH,CACDD,YAAY,CAAGP,OAAO,CAAC,QAAD,CAAP,CAAkB,CAAlB,EAAqB,CAArB,CAAf,CACAa,gBAAgB,CAAGb,OAAO,CAAC,QAAD,CAAP,CAAkB,CAAlB,EAAqB,CAArB,CAAnB,CACH,CACJ,CACJ,CACD,GAAMkB,CAAAA,iCAAiC,CAAG,GAAIC,CAAAA,IAAJ,CAASV,uBAAT,EAAkCW,cAAlC,EAA1C,CACA,GAAMC,CAAAA,kCAAkC,CAAG,GAAIF,CAAAA,IAAJ,CAASR,wBAAT,EAAmCS,cAAnC,EAA3C,CACA,MAAO,CAACF,iCAAD,CAAoCG,kCAApC,CAAP,CACC","sourcesContent":["//Search strategy:\n//outer loop searches highest price beginning from end\n//inner loop scans lowest price after every hit to highest price from outer loop\nexport function maximalprofitwindow(dataset) {    \n    \n    var datalenght = Object.keys(dataset[\"total_volumes\"]).length;\n    var day_highest_price = null\n    var highest_price = 0\n    var lowest_price = 1000000\n    var global_lowest_price = 1000000\n    var global_day_lowest_price = null\n    var global_highest_price = 0\n    var global_day_highest_price = null\n    var biggest_profit = 0\n    var lowest_price = dataset[\"prices\"][0][1]\n    var day_lowest_price = dataset[\"prices\"][0][0]\n\n    for (var i = datalenght-1; i >= 0; i--) {        \n        if (dataset[\"prices\"][i][1] > highest_price  ){\n            highest_price = dataset[\"prices\"][i][1]\n            day_highest_price = dataset[\"prices\"][i][0]\n\n            for (var z = 0; z < i; z++){\n                if (dataset[\"prices\"][z][1] < lowest_price  ){ \n                    console.log(\"x->\")\n                    lowest_price = dataset[\"prices\"][z][1]\n                    day_lowest_price = dataset[\"prices\"][z][0]\n\n            }\n            if (biggest_profit < (highest_price-lowest_price)){\n                biggest_profit = highest_price-lowest_price\n                console.log(biggest_profit)\n                global_lowest_price = lowest_price\n                global_highest_price = highest_price\n                global_day_lowest_price = day_lowest_price\n                global_day_highest_price = day_highest_price\n                console.log(global_day_lowest_price)\n                console.log(global_lowest_price)\n            }   \n            lowest_price = dataset[\"prices\"][0][1]\n            day_lowest_price = dataset[\"prices\"][0][0]\n        }\n    }\n}\nconst global_day_lowest_price_converted = new Date(global_day_lowest_price).toLocaleString()\nconst global_day_highest_price_converted = new Date(global_day_highest_price).toLocaleString()\nreturn [global_day_lowest_price_converted, global_day_highest_price_converted]\n}"]},"metadata":{},"sourceType":"module"}