{"ast":null,"code":"//Älä laske viimeistä tuntia mukaan\n//C) Aikaikkuna jonka loppupäätä liikutetaan alkuun korkeimpaan kohtaan, sitten alkupäätä matalimpaan.\n//Jos korkeampaa kohtaa ei löydy niin jää korkeaan. Etsi vielä matalampaa. Tämä alue on tutkittu.\nimport { biggestvolume } from \"./BiggestVolume\"; //Iskän idea eli ota loppupäästä korkein, sitten alkupäästä käy läpi, löytyy korkein profit. \n//Sitten siirrä looppupäätä alkuunpäin jos korkeampi löytyy, ja taas alusta hae matalinta\n\nexport function maximalprofitwindow(dataset) {\n  var window_start = 0;\n  var window_start_lowest = 0;\n  var window_end_date = 0;\n  var window_end_highest = 0;\n  var window_end_i = 0; //loppupää lopusta alkuun , pysähdy aina uuden korkeimman huipun kohdalle kunnes alussa.\n  //Kun korkein huippu niin mene alkupään kokeilulla alusta loppuun ja pysähdy alimmassa, merkkaa parhaaksi \n  //tulokseksi\n\n  var datalenght = Object.keys(dataset[\"total_volumes\"]).length; //var last_window_end = datalenght\n\n  var day_lowest_price = null;\n  var day_highest_price = null;\n  var highest_price = 0;\n  var lowest_price = 100000;\n  var global_lowest_price = 100000;\n  var global_day_lowest_price = null;\n  var biggest_profit = 0;\n\n  for (var i = datalenght - 1; i >= 0; i--) {\n    if (dataset[\"prices\"][i][1] > highest_price) {\n      highest_price = dataset[\"prices\"][i][1];\n      day_highest_price = dataset[\"prices\"][i][0]; //tule alusta tähän pisteeseen etsien alinta kohtaa\n\n      for (var z = 0; z < i; z++) {\n        if (dataset[\"prices\"][z][1] < lowest_price) {\n          lowest_price = dataset[\"prices\"][z][1];\n          day_lowest_price = dataset[\"prices\"][z][0];\n        } //Nollaa lowest_price ja pistä kuitenkin global lowest_price muistiin\n        //vertaaconsole.log(highest_price-lowest_price)\n        //jos suurempi profit niin sitten talleta globaaleiksi\n\n\n        if (biggest_profit > highest_price - lowest_price) {\n          global_lowest_price = lowest_price;\n          global_day_lowest_price = day_lowest_price;\n          biggest_profit = highest_price - lowest_price;\n        }\n\n        lowest_price = null;\n        day_lowest_price = null; //ota ylin-alin hinta ja niiden päivämäärät\n        //jos ylin-alin on negatiivinen niin ei kuulu ostaa tai myydä tai jos null\n      }\n    }\n  }\n\n  console.log(\"DAY TO BUY\");\n  const milliseconds1 = day_lowest_price; // 1575909015000\n\n  const dateObject1 = new Date(milliseconds1);\n  const humanDateFormat1 = dateObject1.toLocaleString(); //2019-12-9 10:30:15\n\n  console.log(humanDateFormat1);\n  console.log(\"DAY TO SELL\");\n  const milliseconds = day_highest_price; // 1575909015000\n\n  const dateObject = new Date(milliseconds);\n  const humanDateFormat = dateObject.toLocaleString(); //2019-12-9 10:30:15\n\n  console.log(humanDateFormat);\n  console.log(highest_price - lowest_price);\n}","map":{"version":3,"sources":["/home/user/mern/vincit-pre-assignment/src/modules/MaximalProfitWindow.js"],"names":["biggestvolume","maximalprofitwindow","dataset","window_start","window_start_lowest","window_end_date","window_end_highest","window_end_i","datalenght","Object","keys","length","day_lowest_price","day_highest_price","highest_price","lowest_price","global_lowest_price","global_day_lowest_price","biggest_profit","i","z","console","log","milliseconds1","dateObject1","Date","humanDateFormat1","toLocaleString","milliseconds","dateObject","humanDateFormat"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,aAAT,QAA8B,iBAA9B,C,CAEA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACzC,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,kBAAkB,GAAG,CAAzB;AAIA,MAAIC,YAAY,GAAG,CAAnB,CARyC,CAUzC;AACA;AACA;;AACA,MAAIC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYR,OAAO,CAAC,eAAD,CAAnB,EAAsCS,MAAvD,CAbyC,CAczC;;AACA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAIC,iBAAiB,GAAG,IAAxB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,YAAY,GAAG,MAAnB;AACA,MAAIC,mBAAmB,GAAG,MAA1B;AACA,MAAIC,uBAAuB,GAAG,IAA9B;AACA,MAAIC,cAAc,GAAG,CAArB;;AACA,OAAK,IAAIC,CAAC,GAAGX,UAAU,GAAC,CAAxB,EAA2BW,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,QAAIjB,OAAO,CAAC,QAAD,CAAP,CAAkBiB,CAAlB,EAAqB,CAArB,IAA0BL,aAA9B,EAA8C;AAC1CA,MAAAA,aAAa,GAAGZ,OAAO,CAAC,QAAD,CAAP,CAAkBiB,CAAlB,EAAqB,CAArB,CAAhB;AACAN,MAAAA,iBAAiB,GAAGX,OAAO,CAAC,QAAD,CAAP,CAAkBiB,CAAlB,EAAqB,CAArB,CAApB,CAF0C,CAI1C;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuBC,CAAC,EAAxB,EAA2B;AACvB,YAAIlB,OAAO,CAAC,QAAD,CAAP,CAAkBkB,CAAlB,EAAqB,CAArB,IAA0BL,YAA9B,EAA6C;AACzCA,UAAAA,YAAY,GAAGb,OAAO,CAAC,QAAD,CAAP,CAAkBkB,CAAlB,EAAqB,CAArB,CAAf;AACAR,UAAAA,gBAAgB,GAAGV,OAAO,CAAC,QAAD,CAAP,CAAkBkB,CAAlB,EAAqB,CAArB,CAAnB;AACP,SAJ0B,CAK3B;AACA;AACA;;;AACA,YAAIF,cAAc,GAAIJ,aAAa,GAACC,YAApC,EAAkD;AAC9CC,UAAAA,mBAAmB,GAAGD,YAAtB;AACAE,UAAAA,uBAAuB,GAAGL,gBAA1B;AACAM,UAAAA,cAAc,GAAIJ,aAAa,GAACC,YAAhC;AACP;;AACGA,QAAAA,YAAY,GAAG,IAAf;AACAH,QAAAA,gBAAgB,GAAG,IAAnB,CAd2B,CAe3B;AACA;AACH;AAEJ;AAGJ;;AAEDS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMC,aAAa,GAAGX,gBAAtB,CArD6C,CAqDL;;AACxC,QAAMY,WAAW,GAAG,IAAIC,IAAJ,CAASF,aAAT,CAApB;AACA,QAAMG,gBAAgB,GAAGF,WAAW,CAACG,cAAZ,EAAzB,CAvD6C,CAuDS;;AACtDN,EAAAA,OAAO,CAACC,GAAR,CAAYI,gBAAZ;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAMM,YAAY,GAAIf,iBAAtB,CA3D6C,CA2DF;;AAC3C,QAAMgB,UAAU,GAAG,IAAIJ,IAAJ,CAASG,YAAT,CAAnB;AACA,QAAME,eAAe,GAAGD,UAAU,CAACF,cAAX,EAAxB,CA7D6C,CA6DO;;AACpDN,EAAAA,OAAO,CAACC,GAAR,CAAYQ,eAAZ;AAGAT,EAAAA,OAAO,CAACC,GAAR,CAAYR,aAAa,GAACC,YAA1B;AACC","sourcesContent":["//Älä laske viimeistä tuntia mukaan\n//C) Aikaikkuna jonka loppupäätä liikutetaan alkuun korkeimpaan kohtaan, sitten alkupäätä matalimpaan.\n//Jos korkeampaa kohtaa ei löydy niin jää korkeaan. Etsi vielä matalampaa. Tämä alue on tutkittu.\n\nimport { biggestvolume } from \"./BiggestVolume\"\n\n//Iskän idea eli ota loppupäästä korkein, sitten alkupäästä käy läpi, löytyy korkein profit. \n//Sitten siirrä looppupäätä alkuunpäin jos korkeampi löytyy, ja taas alusta hae matalinta\n\nexport function maximalprofitwindow(dataset) {\n    var window_start = 0\n    var window_start_lowest = 0\n    var window_end_date = 0\n    var window_end_highest = 0\n    \n    \n    \n    var window_end_i = 0\n    \n    //loppupää lopusta alkuun , pysähdy aina uuden korkeimman huipun kohdalle kunnes alussa.\n    //Kun korkein huippu niin mene alkupään kokeilulla alusta loppuun ja pysähdy alimmassa, merkkaa parhaaksi \n    //tulokseksi\n    var datalenght = Object.keys(dataset[\"total_volumes\"]).length;\n    //var last_window_end = datalenght\n    var day_lowest_price = null\n    var day_highest_price = null\n    var highest_price = 0\n    var lowest_price = 100000\n    var global_lowest_price = 100000\n    var global_day_lowest_price = null\n    var biggest_profit = 0\n    for (var i = datalenght-1; i >= 0; i--) {\n        if (dataset[\"prices\"][i][1] > highest_price  ){\n            highest_price = dataset[\"prices\"][i][1]\n            day_highest_price = dataset[\"prices\"][i][0]\n            \n            //tule alusta tähän pisteeseen etsien alinta kohtaa\n            for (var z = 0; z < i; z++){\n                if (dataset[\"prices\"][z][1] < lowest_price  ){\n                    lowest_price = dataset[\"prices\"][z][1]\n                    day_lowest_price = dataset[\"prices\"][z][0]                \n            }\n            //Nollaa lowest_price ja pistä kuitenkin global lowest_price muistiin\n            //vertaaconsole.log(highest_price-lowest_price)\n            //jos suurempi profit niin sitten talleta globaaleiksi\n            if (biggest_profit > (highest_price-lowest_price)){\n                global_lowest_price = lowest_price\n                global_day_lowest_price = day_lowest_price\n                biggest_profit = (highest_price-lowest_price)\n        }\n            lowest_price = null\n            day_lowest_price = null\n            //ota ylin-alin hinta ja niiden päivämäärät\n            //jos ylin-alin on negatiivinen niin ei kuulu ostaa tai myydä tai jos null\n        }\n        \n    }\n    \n\n}\n\nconsole.log(\"DAY TO BUY\")\nconst milliseconds1 = day_lowest_price  // 1575909015000\nconst dateObject1 = new Date(milliseconds1)\nconst humanDateFormat1 = dateObject1.toLocaleString() //2019-12-9 10:30:15\nconsole.log(humanDateFormat1)\n\nconsole.log(\"DAY TO SELL\")\nconst milliseconds = (day_highest_price)   // 1575909015000\nconst dateObject = new Date(milliseconds)\nconst humanDateFormat = dateObject.toLocaleString() //2019-12-9 10:30:15\nconsole.log(humanDateFormat)\n\n\nconsole.log(highest_price-lowest_price)\n}"]},"metadata":{},"sourceType":"module"}