{"ast":null,"code":"var _jsxFileName = \"/home/user/mern/vincit-pre-assignment/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport ShowHighestVolume from \"./components/ShowHighestVolume\";\nimport ShowLongestDownTrend from \"./components/ShowLongestDownTrend\";\nimport ShowMaxProfitWindow from \"./components/ShowMaxProfitWindow\";\nimport { hourstodays } from './modules/HoursToDays'; //1-90pv eli ota lähimpänä UTC tai +2GMT oleva aika eli lähimpänä 2:00:0 AM, siitä volyymi ja hinta\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null); // Fetch Tasks\n\n  const fetchData = async e => {\n    e.preventDefault();\n    const startunixtime = Date.parse(startDate) / 1000;\n    const endunixtime = Date.parse(endDate) / 1000 + 3600;\n    const res = await fetch(\"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=\" + startunixtime + \"&to=\" + endunixtime);\n    var dataset = await res.json(); //mahd toinen kuin json()\n\n    var diff = Math.abs(endunixtime * 1000 - startunixtime * 1000);\n    var daycount = diff / 86400000;\n\n    if (daycount <= 90) {\n      console.log(\"alle 90 päivää\");\n      dataset = hourstodays(dataset);\n    } else {\n      console.log(\"yli 90 päivää\");\n    }\n\n    console.log(dataset); //Anna datasetti moduuliin funktiolle josta palautuvat arvot, josta laittaa komponenttiin\n    //B) tulosta päivä jona korkein voluumi ja voluumi\n\n    var biggest_volume = 0; //var biggest_volume_day = null\n\n    var datalenght = Object.keys(dataset[\"total_volumes\"]).length;\n\n    for (let i = 0; i < datalenght; i++) {\n      //console.log(dataset[\"total_volumes\"][i][1])\n      if (dataset[\"total_volumes\"][i][1] > biggest_volume) {\n        console.log(biggest_volume);\n        biggest_volume = dataset[\"total_volumes\"][i][1];\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"add-form\",\n      onSubmit: fetchData,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Start date: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          onChange: e => setStartDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End date: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          onChange: e => setEndDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Load data\",\n        className: \"btn btn-block\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShowLongestDownTrend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShowHighestVolume, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShowMaxProfitWindow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"L5d15HCt6K5rlt26r2UFfuEEVmA=\");\n\n_c = App;\nexport default App; //Älä laske viimeistä tuntia mukaan\n//C) Aikaikkuna jonka loppupäätä liikutetaan alkuun korkeimpaan kohtaan, sitten alkupäätä matalimpaan.\n//Jos korkeampaa kohtaa ei löydy niin jää korkeaan. Etsi vielä matalampaa. Tämä alue on tutkittu.\n//Iskän idea eli ota loppupäästä korkein, sitten alkupäästä käy läpi, löytyy korkein profit. \n//Sitten siirrä looppupäätä alkuunpäin jos korkeampi löytyy, ja taas alusta hae matalinta\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/mern/vincit-pre-assignment/src/App.js"],"names":["React","useState","Header","ShowHighestVolume","ShowLongestDownTrend","ShowMaxProfitWindow","hourstodays","App","startDate","setStartDate","endDate","setEndDate","fetchData","e","preventDefault","startunixtime","Date","parse","endunixtime","res","fetch","dataset","json","diff","Math","abs","daycount","console","log","biggest_volume","datalenght","Object","keys","length","i","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport Header from \"./components/Header\"\nimport ShowHighestVolume from \"./components/ShowHighestVolume\"\nimport ShowLongestDownTrend from \"./components/ShowLongestDownTrend\"\nimport ShowMaxProfitWindow from \"./components/ShowMaxProfitWindow\"\nimport { hourstodays } from './modules/HoursToDays';\n\n//1-90pv eli ota lähimpänä UTC tai +2GMT oleva aika eli lähimpänä 2:00:0 AM, siitä volyymi ja hinta\n\nfunction App() {\n  const [startDate, setStartDate] = useState(null);  \n  const [endDate, setEndDate] = useState(null);  \n   \n\n  // Fetch Tasks\n  const fetchData = async (e) => {\n    e.preventDefault()\n    const startunixtime = ((Date.parse(startDate))/1000)\n    const endunixtime = ((Date.parse(endDate))/1000)+3600\n    const res = await fetch(\"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=\"+startunixtime+\"&to=\"+endunixtime)\n    var dataset = await res.json() //mahd toinen kuin json()\n\n    var diff = Math.abs(endunixtime*1000- startunixtime*1000);\n    var daycount = (diff/86400000)\n\n    if (daycount <= 90){\n      console.log(\"alle 90 päivää\")\n      dataset = hourstodays(dataset)\n    }\n    else{\n      console.log(\"yli 90 päivää\")\n    }\n    console.log(dataset)\n\n    //Anna datasetti moduuliin funktiolle josta palautuvat arvot, josta laittaa komponenttiin\n    //B) tulosta päivä jona korkein voluumi ja voluumi\n    var biggest_volume = 0\n    //var biggest_volume_day = null\n    var datalenght = Object.keys(dataset[\"total_volumes\"]).length;\n    for (let i = 0; i < datalenght; i++){\n      //console.log(dataset[\"total_volumes\"][i][1])\n     if (dataset[\"total_volumes\"][i][1] > biggest_volume){\n       console.log(biggest_volume)\n       biggest_volume = dataset[\"total_volumes\"][i][1]\n    }\n  }\n\n\n  }  \n\n\n  return (\n    \n    <div className=\"container\">\n      <Header />      \n      <form className='add-form' onSubmit={fetchData}>\n      <div className='form-control'>\n                <label>Start date: </label>\n                <input type='date' \n                onChange={(e) => setStartDate(e.target.value)}\n                />\n            \n          </div>\n          <div className='form-control'>\n                <label>End date: </label>\n                <input type='date' \n                onChange={(e) => setEndDate(e.target.value)}/>\n          </div>\n          <input type='submit' value='Load data'\n          className='btn btn-block'/>\n     </form>\n      <ShowLongestDownTrend/>\n      <ShowHighestVolume />\n      <ShowMaxProfitWindow />\n    </div>\n  );\n}\n\nexport default App;\n\n\n//Älä laske viimeistä tuntia mukaan\n//C) Aikaikkuna jonka loppupäätä liikutetaan alkuun korkeimpaan kohtaan, sitten alkupäätä matalimpaan.\n//Jos korkeampaa kohtaa ei löydy niin jää korkeaan. Etsi vielä matalampaa. Tämä alue on tutkittu.\n\n//Iskän idea eli ota loppupäästä korkein, sitten alkupäästä käy läpi, löytyy korkein profit. \n//Sitten siirrä looppupäätä alkuunpäin jos korkeampi löytyy, ja taas alusta hae matalinta"]},"metadata":{},"sourceType":"module"}